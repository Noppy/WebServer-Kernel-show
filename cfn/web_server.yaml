AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy a VPC and 4 subnets
#----------------------------------------------
Parameters:
  InstanceType:
    Description: (optional) Instance type
    Type: String
    Default: m6g.16xlarge
  AmiId:
    Description: (optional) AMI ID
    Type: String
Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - 
        Label: 
          default: Environment
        Parameters: 
          - InstanceType
          - AmiId          
Resources:
  #--------------------------------------
  # IAM
  #--------------------------------------
  #------------------ VPC FlowLog Role
  FlowlogRole:
    Type: "AWS::IAM::Role"
    Properties: 
      Path: "/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - vpc-flow-logs.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        -
          PolicyName: "Flowlog"
          PolicyDocument:
            Version: "2012-10-17"
            Statement: 
              - Effect: Allow
                Action: 
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:DescribeLogGroups"
                  - "logs:DescribeLogStreams"
                  - "logs:PutLogEvents"
                Resource: "*"
  EC2Role:
    Type: AWS::IAM::Role
    Properties: 
      Path: "/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - 
          PolicyName: AllowS3ObjectOperations
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - 
                Effect: Allow
                Action:
                  - "s3:PutObject"
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                  - "s3:DeleteObject"
                  - "s3:DeleteObjectVersion"
                  - "s3:ListAllMyBuckets"
                  - "s3:GetBucketLocation"
                Resource:
                  - !Sub "arn:aws:s3:::${BucketForCF}"
                  - !Sub "arn:aws:s3:::${BucketForCF}/*"
              - 
                Effect: Allow
                Action:
                  - "s3:ListAllMyBuckets"
                  - "s3:ListBucket"
                  - "s3:ListMultipartUploadParts"
                  - "s3:ListBucketVersions"
                Resource: "*"
  EC2RoleProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref EC2Role
  #--------------------------------------
  # VPC - Network
  #--------------------------------------
  #------------------ VPC
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.1.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: WebSystem-VPC
  #------------------ Internet GW
  Igw:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: WebSystem-IGW
  AttachIgw:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref Igw
      VpcId: !Ref Vpc
    DependsOn:
      - Vpc
      - Igw
  #------------------ Subnet
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.1.11.0/24
      VpcId: !Ref Vpc
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref AWS::Region
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: WebSystem-PublicSubnet-1
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.1.12.0/24
      VpcId: !Ref Vpc
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref AWS::Region
      MapPublicIpOnLaunch: yes
      Tags:
        - Key: Name
          Value: WebSystem-PublicSubnet-2
  #------------------ Route Table
  #----------  VPC Public Route Table
  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: WebSystem-PubSubRouteTable
  VpcInternetRote:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref Igw
  #---- Attache to subnets in the  VPC
  PublicSubnetRouteTableAssociationPublicSubnet1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicSubnetRouteTable
  PublicSubnetRouteTableAssociationPublicSubnet2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicSubnetRouteTable
  #------------------ Local Domain Name
  VpcInternalDns:
    Type: AWS::Route53::HostedZone
    Properties:
      HostedZoneConfig:
        Comment: "Resource DNS for  VPC"
      Name: local.
      VPCs:
        - VPCId: !Ref Vpc
          VPCRegion: !Ref AWS::Region
  #------------------ Cloudwatch log for Flowlog
  VPCFlowlog:
    Type: AWS::EC2::FlowLog
    Properties:
      DeliverLogsPermissionArn: !GetAtt FlowlogRole.Arn
      LogGroupName: WebSystem/VpcFlowlog
      ResourceId: !Ref Vpc
      ResourceType: VPC
      TrafficType: ALL
  #--------------------------------------
  # CloudFront and S3
  #--------------------------------------
  BucketForCF:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
  BucketForCFBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref BucketForCF
      PolicyDocument:
        Statement:
          - Action: s3:GetObject
            Effect: Allow
            Resource: !Sub "arn:aws:s3:::${BucketForCF}/*"
            Principal:
              AWS: !Sub "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CfOai}"
  CfDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
        - Id: S3Origin
          DomainName: !GetAtt BucketForCF.RegionalDomainName
          S3OriginConfig:
            OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CfOai}"
        Enabled: true
        DefaultRootObject: index.html
        Comment: !Sub "${AWS::StackName} distribution"
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ForwardedValues:
            QueryString: false
          ViewerProtocolPolicy: redirect-to-https
  CfOai:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Ref AWS::StackName
  #--------------------------------------
  # Instance for code static analysis
  #--------------------------------------
  CodeStaticAnalysisInstanceTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub CodeStaticAnalysis-${AWS::StackName}
      LaunchTemplateData:
        ImageId: !Ref AmiId
        InstanceType: !Ref InstanceType
        IamInstanceProfile:
          Arn: !GetAtt EC2RoleProfile.Arn
        Monitoring:
          Enabled: true
        #SecurityGroupIds:
        #  - !Ref WebSG
        BlockDeviceMappings:
          -
            DeviceName: /dev/xvda
            VirtualName: RootVol
            Ebs:
              DeleteOnTermination: true
              VolumeType: gp3
              VolumeSize: 8
              Encrypted: false
          -
            DeviceName: /dev/sdf
            VirtualName: DataVol
            Ebs:
              DeleteOnTermination: true
              VolumeType: gp3
              VolumeSize: 30
              Encrypted: false
        NetworkInterfaces:
          -
            DeviceIndex: 0
            SubnetId: !Ref PublicSubnet1
            Groups:
              - !GetAtt Vpc.DefaultSecurityGroup
            AssociatePublicIpAddress: true
            DeleteOnTermination: true
        UserData:
          Fn::Base64:
            Fn::Join:
              - ""
              - - !Sub |
                  #!/bin/bash -xe
                  #Change Hostname
                  hostnamectl set-hostname "CodeStaticAnalysis"

                  #Update packages and install git
                  yum update -y
                  yum -y install git

                  # Format and mount
                  parted /dev/nvme1n1 mklabel gpt
                  parted /dev/nvme1n1 mkpart primary xfs 0 100%
                  mkfs.xfs -f -i maxpct=25 /dev/nvme1n1p1
                  xfs_admin -U ce5c319b-77f2-44c6-8fee-aceccf106d93 /dev/nvme1n1p1
                  mkdir /data
                  echo 'UUID=ce5c319b-77f2-44c6-8fee-aceccf106d93     /data       xfs    defaults,noatime  1   1' >> /etc/fstab
                  mount -a

                  #Setup srpm2html - preparation
                  sudo yum -y install git
                  sudo amazon-linux-extras install -y ansible2 

                  #Setup srpm2html - clone git repository
                  cd /root
                  git clone https://github.com/Noppy/srpm2html.git
                  cd srpm2html/ansible
                  ansible-playbook srpm2html.yml -i inventory
  CodeStaticAnalysis:
    Type: AWS::EC2::Instance
    Properties:
      LaunchTemplate: 
        LaunchTemplateId: !Ref CodeStaticAnalysisInstanceTemplate
        Version: !GetAtt CodeStaticAnalysisInstanceTemplate.LatestVersionNumber
      Tags:
        -
          Key: Nanme
          Value: "CodeStaticAnalysisr#1"